buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

mixin{
    add sourceSets.main, 'mixins.workers.refmap.json'
    config 'mixins.workers.json'

    disableTargetValidator = true
    overwriteErrorLevel = 'error'
}



version = '1.7.8.3'

group = 'com.talhanation.workers'
archivesBaseName = 'workers-1.18.2'




java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'workers'

            Random rnd = new Random()

            args = ['--username', 'talhanation']// + rnd.nextInt(1000)]


            mods {
                'workers' {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'workers'

            mods {
                'workers' {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'workers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                'workers' {
                    source sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    mavenLocal()
    maven {

        url "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
    shadow fg.deobf("de.maxhenkel.corelib:corelib:1.18.2-1.0.3:api")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:1.18.2-1.0.3")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:1.18.2-1.0.3:javadoc")
	
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:small-ships-450659:4578112")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {

}

jar.finalizedBy('reobfJar')

artifacts {
    archives shadowJar
}

shadowJar {
    project.configurations.shadow.setTransitive(true)
    configurations = [project.configurations.shadow]
    classifier = ""
    relocate 'de.maxhenkel.corelib', "de.maxhenkel.workers.corelib"
}

reobf {
    shadowJar {}
}